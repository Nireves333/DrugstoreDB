-- MySQL Script generated by MySQL Workbench
-- Mon Jan 30 13:34:07 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
SET GLOBAL FOREIGN_KEY_CHECKS=0;
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema cst363
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cst363` DEFAULT CHARACTER SET utf8 ;
USE `cst363` ;

-- -----------------------------------------------------
-- Table `Specialty`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Specialty` (
  `ID` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Doctor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Doctor` (
  `SSN` INT NOT NULL,
  `firstName` VARCHAR(30) NOT NULL,
  `lastName` VARCHAR(30) NOT NULL,
  `startDate` DATETIME NOT NULL,
  `yearsOfExperience` INT NULL,
  `specialtyID` INT NOT NULL,
  PRIMARY KEY (`SSN`, `specialtyID`),
  UNIQUE INDEX `SSN_UNIQUE` (`SSN` ASC) VISIBLE,
  INDEX `fk_Doctor_Specialty1_idx` (`specialtyID` ASC) VISIBLE,
  CONSTRAINT `fk_Doctor_Specialty1`
    FOREIGN KEY (`specialtyID`)
    REFERENCES `Specialty` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Patient`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Patient` (
  `SSN` INT NOT NULL,
  `firstName` VARCHAR(30) NOT NULL,
  `lastName` VARCHAR(30) NOT NULL,
  `dateOfBirth` DATETIME NOT NULL,
  `age` INT NULL,
  `address` VARCHAR(256) NOT NULL,
  `primaryPhysician` VARCHAR(45) NULL,
  `doctorSSN` INT NOT NULL,
  PRIMARY KEY (`SSN`, `doctorSSN`),
  INDEX `fk_Patient_Doctor1_idx` (`doctorSSN` ASC) VISIBLE,
  UNIQUE INDEX `SSN_UNIQUE` (`SSN` ASC) VISIBLE,
  CONSTRAINT `fk_Patient_Doctor1`
    FOREIGN KEY (`doctorSSN`)
    REFERENCES `Doctor` (`SSN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pharmaceutical_Company`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pharmaceutical_Company` (
  `ID` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `phoneNumber` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Retail_Pharmacy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Retail_Pharmacy` (
  `ID` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `address` VARCHAR(256) NOT NULL,
  `phoneNumber` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `pharmacyID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Prescription_Drug`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Prescription_Drug` (
  `ID` INT NOT NULL,
  `genericName` VARCHAR(45) NOT NULL,
  `tradeName` VARCHAR(45) NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `tradeName_UNIQUE` (`tradeName` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Doctor_has_Prescription_Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Doctor_has_Prescription_Order` (
  `doctorSSN` INT NOT NULL,
  `RXNumber` INT NOT NULL,
  PRIMARY KEY (`doctorSSN`, `RXNumber`),
  INDEX `fk_Doctor_has_Prescription_Order_Doctor1_idx` (`doctorSSN` ASC) VISIBLE,
  CONSTRAINT `fk_Doctor_has_Prescription_Order_Doctor1`
    FOREIGN KEY (`doctorSSN`)
    REFERENCES `Doctor` (`SSN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Patient_has_Prescription_Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Patient_has_Prescription_Order` (
  `patientSSN` INT NOT NULL,
  `RXNumber` INT NOT NULL,
  PRIMARY KEY (`patientSSN`, `RXNumber`),
  INDEX `fk_Patient_has_Prescription_Order_Patient1_idx` (`patientSSN` ASC) VISIBLE,
  CONSTRAINT `fk_Patient_has_Prescription_Order_Patient1`
    FOREIGN KEY (`patientSSN`)
    REFERENCES `Patient` (`SSN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Prescription_Order_has_Prescription_Drug`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Prescription_Order_has_Prescription_Drug` (
  `RXNumber` INT NOT NULL,
  `ID` INT NOT NULL,
  PRIMARY KEY (`RXNumber`, `ID`),
  INDEX `fk_Prescription_Order_has_Prescription_Drug_Prescription_Dr_idx` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Prescription_Order_has_Prescription_Drug_Prescription_Drug1`
    FOREIGN KEY (`ID`)
    REFERENCES `Prescription_Drug` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Supervisor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Supervisor` (
  `ID` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Pharmaceutical_Company_has_Retail_Pharmacy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Pharmaceutical_Company_has_Retail_Pharmacy` (
  `retailPharmacyID` INT NOT NULL,
  `pharmaceuticalCompanyID` INT NOT NULL,
  `supervisorID` INT NOT NULL,
  `contractStartDate` DATETIME NOT NULL,
  `contractEndDate` DATETIME NOT NULL,
  `contractText` LONGTEXT NULL,
  PRIMARY KEY (`retailPharmacyID`, `pharmaceuticalCompanyID`, `supervisorID`),
  INDEX `fk_Pharmaceutical_Company_has_Retail_Pharmacy1_Retail_Pharm_idx` (`retailPharmacyID` ASC) VISIBLE,
  INDEX `fk_Pharmaceutical_Company_has_Retail_Pharmacy1_Supervisor1_idx` (`supervisorID` ASC) VISIBLE,
  INDEX `fk_Pharmaceutical_Company_has_Retail_Pharmacy1_Pharmaceutic_idx` (`pharmaceuticalCompanyID` ASC) VISIBLE,
  CONSTRAINT `fk_Pharmaceutical_Company_has_Retail_Pharmacy1_Retail_Pharmacy1`
    FOREIGN KEY (`retailPharmacyID`)
    REFERENCES `Retail_Pharmacy` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pharmaceutical_Company_has_Retail_Pharmacy1_Supervisor1`
    FOREIGN KEY (`supervisorID`)
    REFERENCES `Supervisor` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pharmaceutical_Company_has_Retail_Pharmacy1_Pharmaceutical1`
    FOREIGN KEY (`pharmaceuticalCompanyID`)
    REFERENCES `Pharmaceutical_Company` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Prescription_Drug_has_Pharmaceutical_Company`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Prescription_Drug_has_Pharmaceutical_Company` (
  `drugID` INT NOT NULL,
  `pharmaceuticalCompanyID` INT NOT NULL,
  PRIMARY KEY (`drugID`, `pharmaceuticalCompanyID`),
  INDEX `fk_Prescription_Drug_has_Pharmaceutical_Company_Pharmaceuti_idx` (`pharmaceuticalCompanyID` ASC) VISIBLE,
  INDEX `fk_Prescription_Drug_has_Pharmaceutical_Company_Prescriptio_idx` (`drugID` ASC) VISIBLE,
  CONSTRAINT `fk_Prescription_Drug_has_Pharmaceutical_Company_Prescription_1`
    FOREIGN KEY (`drugID`)
    REFERENCES `Prescription_Drug` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prescription_Drug_has_Pharmaceutical_Company_Pharmaceutica1`
    FOREIGN KEY (`pharmaceuticalCompanyID`)
    REFERENCES `Pharmaceutical_Company` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Prescription_Drug_has_Retail_Pharmacy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Prescription_Drug_has_Retail_Pharmacy` (
  `drugID` INT NOT NULL,
  `retailPharmacyID` INT NOT NULL,
  `drugCost` DECIMAL(7,2) NOT NULL,
  PRIMARY KEY (`drugID`, `retailPharmacyID`),
  INDEX `fk_Prescription_Drug_has_Retail_Pharmacy_Retail_Pharmacy1_idx` (`retailPharmacyID` ASC) VISIBLE,
  INDEX `fk_Prescription_Drug_has_Retail_Pharmacy_Prescription_Drug1_idx` (`drugID` ASC) VISIBLE,
  CONSTRAINT `fk_Prescription_Drug_has_Retail_Pharmacy_Prescription_Drug1`
    FOREIGN KEY (`drugID`)
    REFERENCES `Prescription_Drug` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prescription_Drug_has_Retail_Pharmacy_Retail_Pharmacy1`
    FOREIGN KEY (`retailPharmacyID`)
    REFERENCES `Retail_Pharmacy` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Prescription_Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Prescription_Order` (
  `RXNumber` INT NOT NULL,
  `prescribeDate` DATETIME NOT NULL,
  `quantity` INT NOT NULL,
  `Doctor_SSN` INT NOT NULL,
  `Patient_SSN` INT NOT NULL,
  `pharmacyID` INT NOT NULL,
  `genericOK` TINYINT(1) NOT NULL,
  `pharmaceuticalCompanyID` INT NOT NULL,
  `drugID` INT NOT NULL,
  `fillDate` DATETIME NULL,
  PRIMARY KEY (`RXNumber`, `Doctor_SSN`, `Patient_SSN`, `pharmacyID`, `drugID`),
  INDEX `fk_Prescription_Order_Doctor1_idx` (`Doctor_SSN` ASC) VISIBLE,
  INDEX `fk_Prescription_Order_Patient1_idx` (`Patient_SSN` ASC) VISIBLE,
  INDEX `fk_Prescription_Order_Retail_Pharmacy1_idx` (`pharmacyID` ASC) VISIBLE,
  INDEX `fk_Prescription_Order_Prescription_Drug1_idx` (`drugID` ASC) INVISIBLE,
  INDEX `fk_Prescription_Order_Pharmaceutical_Company1_idx` (`pharmaceuticalCompanyID` ASC) VISIBLE,
  CONSTRAINT `fk_Prescription_Order_Doctor1`
    FOREIGN KEY (`Doctor_SSN`)
    REFERENCES `Doctor` (`SSN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prescription_Order_Patient1`
    FOREIGN KEY (`Patient_SSN`)
    REFERENCES `Patient` (`SSN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prescription_Order_Retail_Pharmacy1`
    FOREIGN KEY (`pharmacyID`)
    REFERENCES `Retail_Pharmacy` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prescription_Order_Prescription_Drug1`
    FOREIGN KEY (`drugID`)
    REFERENCES `Prescription_Drug` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Prescription_Order_Pharmaceutical_Company1`
    FOREIGN KEY (`pharmaceuticalCompanyID`)
    REFERENCES `Pharmaceutical_Company` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- What’s the most common prescription drug prescribed by ​​Oncology?
SELECT pd.genericName, pd.tradeName, COUNT(RXNumber) 
FROM prescription_order as po
JOIN doctor AS d ON po.doctor_ssn = d.ssn
JOIN specialty AS s ON d.specialtyID = s.ID
JOIN prescription_drug AS pd ON po.drugID = pd.ID
WHERE s.name = 'Oncology'
GROUP BY 1,2
HAVING COUNT(RXNumber) = (
	SELECT MAX(rx_count) 
FROM (
		SELECT COUNT(RXNumber) as rx_count
		FROM prescription_order as a
		JOIN doctor AS b ON a.doctor_SSN = b.SSN
		WHERE b.specialtyID = (SELECT ID FROM specialty WHERE name = 'Oncology')
        GROUP BY drugID
        ) AS c);



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- What is the lowest price option available for ibuprophen?
SELECT pd.genericName, rtp.name AS retailName 
FROM prescription_drug AS pd
JOIN prescription_drug_has_retail_pharmacy AS rt ON rt.drugID = pd.ID
JOIN retail_pharmacy rtp ON rt.retailPharmacyID = rtp.ID
WHERE pd.genericName = 'ibuprophen' AND 
rt.drugCost = (
SELECT MIN(drugCost) 
FROM prescription_drug_has_retail_pharmacy AS pd_rt
    JOIN prescription_drug AS pd ON pd_rt.drugID = pd.ID
    WHERE pd.genericName = 'ibuprophen');

-- Which doctor(s) prescribes the most medications?
CREATE view all_prescription_orders AS (
SELECT doctor.SSN AS doctorID, doctor.firstName, doctor.lastName, count(prescription_order.RXNumber) AS prescriptionCount 
FROM doctor, prescription_order 
WHERE doctor.SSN = prescription_order.Doctor_SSN
GROUP BY doctor.SSN);

SELECT * FROM all_prescription_orders WHERE prescriptionCount = (
SELECT MAX(prescriptionCount) FROM all_prescription_orders);

-- What is the total revenue for Paul’s Pharmacy between dates 01/01/2022 and 01/01/2023?
SELECT pdr.drugCost*COUNT(po.quantity) AS totalRevenue FROM prescription_order po
JOIN prescription_drug pd ON pd.ID = po.drugID
JOIN prescription_drug_has_retail_pharmacy pdr ON pdr.drugID = pd.ID
JOIN retail_pharmacy rp ON rp.ID = pdr.retailPharmacyID
WHERE po.prescribeDate BETWEEN '2002-01-01' AND '2023-01-01' AND rp.name = 'Paul''s Pharmacy'
GROUP BY pdr.drugCost;

-- What is the most commonly used manufacturer for Folic Acid generic prescriptions?
CREATE VIEW pharma_company_prescriptions AS(
SELECT pharmaceuticalCompanyID, pc.name, count(RXNumber) AS prescriptionCount 
FROM prescription_order AS po
JOIN prescription_drug AS pd ON po.drugID = pd.ID
JOIN Pharmaceutical_Company As pc ON po.pharmaceuticalCompanyID = pc.ID
WHERE genericName = 'Folic Acid'
GROUP BY pharmaceuticalCompanyID);

SELECT * FROM pharma_company_prescriptions 
WHERE prescriptionCount = (SELECT MAX(prescriptionCount) FROM pharma_company_prescriptions)


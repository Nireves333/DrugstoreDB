package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

@Controller 
public class ControllerPrescription {
	
	@Controller    
	public class ControllerPrescriptionCreate {
		
		@Autowired
		private JdbcTemplate jdbcTemplate;
		
		/*
		 * Doctor requests blank form for new prescription.
		 */
		@GetMapping("/prescription/new")
		public String newPrescripton(Model model) {
			model.addAttribute("prescription", new Prescription_Order());
			
			return "prescription_create";
		}
		
		/* 
		 * Process the new prescription form.
		 * 1.  Validate that Doctor SSN exists and matches Doctor Name. 
		 * 2.  Validate that Patient SSN exists and matches Patient Name.  
		 * 3.  Validate that Drug name exists. 
		 * 4.  Insert new prescription. 
		 * 5.  If error, return error message and the prescription form  
		 * 6.  Otherwise, return the prescription with the rxid number that was generated by the database. 
		 */
		@PostMapping("/prescription/new")
		public String newPrescription( Prescription_Order p, Model model) {
			
			
			try (Connection con = getConnection();){
				
				ResultSet rs;
				
				// get data from database based on inputed information -- DOCTOR INFO
				PreparedStatement ps2 = con.prepareStatement("SELECT * from doctor WHERE SSN = " 
						+ p.getDoctor_SSN() + ";");
				rs = ps2.executeQuery();
				String doctorFirstName = "";
				String doctorLastName = "";
				int doctorSSN = 0;
				while(rs.next()) {
					doctorFirstName = rs.getString("firstName");
					doctorLastName = rs.getString("lastName");
					doctorSSN = rs.getInt("SSN");
				}
				if (p.getQuantity() < 1) {
					model.addAttribute("message", "Error: Quantity Must Be A Positive Value.");
					model.addAttribute("prescription", p);
					
					return "prescription_create";
				}
				
				// validate doctor information
				if (!doctorFirstName.equals(p.getDoctorFirstName()) || !doctorLastName.equals(p.getDoctorLastName()) || doctorSSN < 10000000){
					
					model.addAttribute("message", "Error: Doctor Information Does Not Match Records.");
					model.addAttribute("prescription", p);
					
					return "prescription_create";
					
				} else {
					// get data from database based on inputed information -- PATIENT INFO
					ps2 = con.prepareStatement("SELECT * from patient WHERE patient.SSN = " 
					+ p.getPatient_SSN() + ";");
					rs = ps2.executeQuery();
					String patientFirstName = "";
					String patientLastName = "";

					while(rs.next()) {
						patientFirstName = rs.getString("firstName");
						patientLastName = rs.getString("lastName");
					}
					
					// validate patient information
					if (!patientFirstName.equals(p.getPatientFirstName()) 
							|| !patientLastName.equals(p.getPatientLastName())) {
						model.addAttribute("message", "Error: Patient Information Does Not Match Records.");
						model.addAttribute("prescription", p);
						return "prescription_create";
					} else {
						// get data from database based on inputed information -- DRUG NAME
						ps2 = con.prepareStatement("SELECT * from prescription_drug WHERE genericName = '" 
								+ p.getDrugName() + "' OR tradeName = '" + p.getDrugName() + "'");
						rs = ps2.executeQuery();
						
						int drugID = 0;
						String drugTradeName = "";
						String drugGenericName = "";
						
						while(rs.next()) {
							drugID = rs.getInt("ID");
							
							drugTradeName = rs.getString("tradeName");
							drugGenericName = rs.getString("genericName");
						}
						
						// validate drug information
						if(drugTradeName.equals(p.getDrugName()) || drugGenericName.equals(p.getDrugName())) {
							PreparedStatement ps = con.prepareStatement("insert into prescription_order"
									+ "(RXNumber, prescribeDate, quantity, Doctor_SSN, Patient_SSN, pharmacyID, genericOK,"
									+ " pharmaceuticalCompanyID, drugID)"
									+ " values(?, ?, ?, ?, ?, ?, ?, ?, ?)", 
									Statement.RETURN_GENERATED_KEYS);
							p.setRXNumber(DataGenerate.getRXNumber());
							p.setDrugID(drugID);
							java.sql.Date currentDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
							p.setPrescribeDate(currentDate);
							
							ps.setInt(1, p.getRXNumber());
							ps.setDate(2, p.getPrescribeDate());
							ps.setInt(3, p.getQuantity());
							ps.setInt(4, p.getDoctor_SSN());
							ps.setInt(5, p.getPatient_SSN());
							p.setPharmacyID(1);   				// default value, changed when filled
							ps.setInt(6, p.getPharmacyID());
							ps.setBoolean(7, p.isGenericOk());
							p.setPharmaceuticalCompanyID(1);    // default value, changed when filled
							ps.setInt(8, p.getPharmaceuticalCompanyID());
							ps.setInt(9, p.getDrugID());
							ps.executeUpdate();

						} else {
							model.addAttribute("message", "Error: Drug Information Does Not Match Records.");
							model.addAttribute("prescription", p);
							return "prescription_create";
						}
					}
					
					
					
					
				}
				
			} catch (SQLException e) {
				model.addAttribute("message", "SQL Error."+e.getMessage());
				model.addAttribute("prescription", p);
				return "prescription_create";
			}
			
			// all tests have passed and data has been inserted 
			model.addAttribute("message", "Prescription created.");
			model.addAttribute("prescription", p);
			return "prescription_create_show";
		}
		
		/*
		 * return JDBC Connection using jdbcTemplate in Spring Server
		 */
		private Connection getConnection() throws SQLException {
			Connection conn = jdbcTemplate.getDataSource().getConnection();
			return conn;
		}
		
	}
	@Controller   
	
public class ControllerPrescriptionFill {

		@Autowired
		private JdbcTemplate jdbcTemplate;


		/* 
		 * Patient requests form to search for prescription.
		 */
		@GetMapping("/prescription/fill")
		public String getfillForm(Model model) {
			model.addAttribute("prescription", new Prescription_Order());
			return "prescription_fill";
		}


		/*
		 * Process the prescription fill request from a patient.
		 * 1.  Validate that Prescription p contains rxid, pharmacy name and pharmacy address
		 *     and uniquely identify a prescription and a pharmacy.
		 * 2.  update prescription with pharmacyid, name and address. 
		 * 3.  update prescription with today's date.
		 * 4.  Display updated prescription 
		 * 5.  or if there is an error show the form with an error message.
		 */
		@PostMapping("/prescription/fill")
		public String processFillForm(Prescription_Order p,  Model model) {

			try (Connection con = getConnection();){
				
			ResultSet rs;
			
			// validate prescription p contains data other than default values
			if (p.getRXNumber() < 1 || p.getPharmacyAddress().length() < 1 || p.getPharmacyName().length() < 1) {
				model.addAttribute("message", "Error: Invalid Data.");
				model.addAttribute("prescription", p);

				return "prescription_fill";
			}
			
					// get data from database based on inputed information -- PRESCRIPTION INFO
					PreparedStatement ps = con.prepareStatement("SELECT * from prescription_order WHERE RXNumber = " 
																+ p.getRXNumber() + ";");
					System.out.println(ps);
					rs = ps.executeQuery();
						
				int Patient_SSN = 0;
				int Doctor_SSN = 0;
				int drugID = 0;
				int quantity = 0;
				java.sql.Date prescribeDate = null;
				java.sql.Date fillDate = null;
				boolean genericOk = false;
				while (rs.next()) {
					Patient_SSN = rs.getInt("Patient_SSN");
					Doctor_SSN = rs.getInt("Doctor_SSN");
					drugID = rs.getInt("drugID");
					quantity = rs.getInt("quantity");
					prescribeDate = rs.getDate("prescribeDate");
					fillDate = rs.getDate("fillDate");
					genericOk = rs.getBoolean("genericOk");
					
				}
				
				
				// check to see if prescription has already been filled 
				if (fillDate != null) { 
					model.addAttribute("message", "Error: Prescription Already Filled.");
					model.addAttribute("prescription", p);
					return "prescription_fill"; 
					}
				 
				// get data from database based on inputed information -- DOCTOR INFO
				ps = con.prepareStatement("SELECT * from doctor WHERE SSN = " + Doctor_SSN + ";");
				rs = ps.executeQuery();
				
				String doctorFirstName = "";
				String doctorLastName = "";
				while (rs.next()) {
					doctorFirstName = rs.getString("firstName");
					doctorLastName = rs.getString("lastName");
				}
				
					// get data from database based on inputed information -- PATIENT INFO
					ps = con.prepareStatement("SELECT * from patient WHERE SSN = " + Patient_SSN + ";");
					rs = ps.executeQuery();
					
				String patientLastName = "";
				String patientFirstName = "";
				while (rs.next()) {
					patientFirstName = rs.getString("firstName");
					patientLastName = rs.getString("lastName");
				}
				
				// check to make sure patient name and SSN match based on input
				if (Patient_SSN != p.getPatient_SSN() || !patientLastName.equals(p.getPatientLastName())) {
					model.addAttribute("message", "Error: Invalid Patient Data.");
					model.addAttribute("prescription", p);

					return "prescription_fill";
					
				} else {
					
						// get data from database based on inputed information -- PHARMACY INFO
						ps = con.prepareStatement("SELECT * from retail_pharmacy "
								+ "WHERE address = \"" + p.getPharmacyAddress() 
								+ "\" AND name = \"" + p.getPharmacyName()
								+ "\";");
						rs = ps.executeQuery();
						
					String pharmacyName = "";
					String pharmacyAddress = "";
					int retail_pharmacyID = 0;
					
					while (rs.next()) {
						pharmacyName = rs.getString("name");
						pharmacyAddress = rs.getString("address");
						retail_pharmacyID = rs.getInt("ID");
					}
					
					// check to make sure pharmacy name and address match based on input
					if (!pharmacyName.equals(p.getPharmacyName()) || !pharmacyAddress.equals(p.getPharmacyAddress())) {
						model.addAttribute("message", "Error: Invalid Pharmacy Data.");
						model.addAttribute("prescription", p);

						return "prescription_fill";
					} else {
						
						java.sql.Date currentDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
						
							// get data from database based on inputed information -- PHARMACY INFO
							ps = con.prepareStatement("SELECT * from prescription_drug "
									+ "WHERE ID = " + drugID + ";");
							rs = ps.executeQuery();
						
						String drugName = "";
						while (rs.next()) {
							if (genericOk == true) {
								drugName = rs.getString("genericName");
								
							} else {
								drugName = rs.getString("tradeName");
							}
						}
						
						// update p, since it is used for the show page
						p.setDoctor_SSN(Doctor_SSN);
						p.setDoctorFirstName(doctorFirstName);
						p.setDoctorLastName(doctorLastName);
						p.setPatientFirstName(patientFirstName);
						p.setPharmacyID(retail_pharmacyID);
						p.setDrugID(drugID);
						p.setDrugName(drugName);
						p.setFillDate(currentDate);
						p.setPrescribeDate(prescribeDate);
						p.setQuantity(quantity);
						
						// data has been validated, update prescription_order
						// set data in database based on inputed information -- PRESCRIPTION_ORDER UPDATE
						ps = con.prepareStatement("UPDATE prescription_order "
								+ "SET pharmacyID = " + p.getPharmacyID()
								+ ", fillDate = '" + p.getFillDate() 
								+ "' WHERE RXNumber = " + p.getRXNumber() + ";");
						ps.executeUpdate();
						
					}
					
				}
				
			}catch (SQLException e) {
				model.addAttribute("message", "SQL Error."+e.getMessage());
				model.addAttribute("prescription", p);
				return "prescription_fill";
			}
			
			// all tests have passed and data has been updated
			model.addAttribute("message", "Prescription has been filled.");
			model.addAttribute("prescription", p);
			return "prescription_fill_show";

		}

		/*
		 * return JDBC Connection using jdbcTemplate in Spring Server
		 */

		private Connection getConnection() throws SQLException {
			Connection conn = jdbcTemplate.getDataSource().getConnection();
			return conn;
		}

	}
}
